<link rel="stylesheet" href="/css/user/profile.css">

<main>
    <h2>H·ªì s∆° c·ªßa <%= user.Username %></h2>
<p>Email: <%= user.Email %></p>
<p>Vai tr√≤: <%= user.Role === 'admin' ? 'Qu·∫£n tr·ªã vi√™n' : 'Ng∆∞·ªùi d√πng' %></p>
<p>Tr·∫°ng th√°i: <%= user.Status === 'active' ? 'Ho·∫°t ƒë·ªông' : 'B·ªã c·∫•m' %></p>
<p>Tham gia v√†o: <%= new Date(user.CreatedAt).toLocaleDateString() %></p>

<h3>ƒê·ªïi M·∫≠t Kh·∫©u</h3>
<form id="changePasswordForm">
    <input type="hidden" id="userID" value="<%= user.UserID %>">
    <label for="currentPassword">M·∫≠t kh·∫©u hi·ªán t·∫°i:</label>
    <input type="password" id="currentPassword">
    <label for="newPassword">M·∫≠t kh·∫©u m·ªõi:</label>
    <input type="password" id="newPassword">
    <button type="submit">X√°c nh·∫≠n</button>
</form>
<h3>üìö Ti·ªÉu thuy·∫øt ƒë√£ s·ªü h·ªØu (<%= totalOwned %> / <%= totalCanOwn %>)
    <button id="add-novel-btn">‚ûï Th√™m</button>
</h3>

<div class="novel-list">
    <% if (ownedNovels.length > 0) { %>
        <% ownedNovels.forEach(novel => { %>
            <div class="novel-card">
                <img src="<%= novel.CoverImage %>" alt="<%= novel.Title %>">
                <h3><a href="/novels/<%= novel.NovelID %>"><%= novel.Title %></a></h3>
                <p>ƒê√£ mua v√†o: <%= new Date(novel.PurchasedAt).toLocaleDateString() %></p>
            </div>
        <% }) %>
    <% } else { %>
        <p>Ng∆∞·ªùi d√πng ch∆∞a s·ªü h·ªØu ti·ªÉu thuy·∫øt n√†o.</p>
    <% } %>
</div>

<h3>üìñ Ti·ªÉu thuy·∫øt ƒë√£ ƒëƒÉng t·∫£i (<%= uploadedNovels.length %>)
    <button id="upload-novel-btn" class="upload-btn">
        ‚ûï ƒêƒÉng Ti·ªÉu Thuy·∫øt
    </button>
</h3>

<div class="novel-list">
    <% if (uploadedNovels.length > 0) { %>
        <% uploadedNovels.forEach(novel => { %>
            <div class="novel-card">
                <img src="<%= novel.CoverImage %>" alt="<%= novel.Title %>">
                <h3><a href="/novels/<%= novel.NovelID %>"><%= novel.Title %></a></h3>
                <p>ƒêƒÉng t·∫£i v√†o: <%= new Date(novel.CreatedAt).toLocaleDateString() %></p>
                <a href="/user/novels/<%= novel.NovelID %>/add-chapter" class="add-chapter-btn">‚ûï Th√™m ch∆∞∆°ng</a>
            </div>
        <% }) %>
    <% } else { %>
        <p>B·∫°n ch∆∞a ƒëƒÉng t·∫£i ti·ªÉu thuy·∫øt n√†o.</p>
    <% } %>
</div>

<div class="bookmark-list">
    <h1>Danh s√°ch ch∆∞∆°ng ƒë√£ ƒë√°nh d·∫•u</h1>
    <ul>
        <% if (bookmarks.length > 0) { %>
        <% bookmarks.forEach(bookmark => { %>
            <li>
                <a href="/user/read/<%= bookmark.NovelID %>/chapter/<%= bookmark.ChapterNumber %>">
                    <%= bookmark.NovelTitle %> - Ch∆∞∆°ng <%= bookmark.ChapterNumber %>
                </a>
            </li>
        <% }) %>
        <% } else { %>
            <p>B·∫°n ch∆∞a ƒë√°nh d·∫•u ti·ªÉu thuy·∫øt n√†o.</p>
        <% } %>
    </ul>
</div>

<h1>L·ªãch s·ª≠ giao d·ªãch</h1>
<table>
    <tr>
        <th>T√™n G√≥i</th>
        <th>S·ªë Ti·ªÅn</th>
        <th>Tr·∫°ng Th√°i</th>
        <th>Ng√†y Th·ª±c Hi·ªán</th>
    </tr>
    <div id="transaction-history">
        <% transactions.forEach(transaction => { %>
            <tr>
                <td><%= transaction.UserName %></td>
                <td><%= transaction.PlanName %></td>
                <td><%= transaction.Amount.toLocaleString() %> VND</td>
                <td><%= transaction.Status %></td>
                <td><%= transaction.CreatedAt %></td>
            </tr>
        <% }) %>
    </div>
</table>

<h1>Thu nh·∫≠p:</h1>
<% if (uploadedNovels.length > 0) { %>
    <h3>Thu nh·∫≠p c·ªßa b·∫°n: <%= authorIncome.toLocaleString() %> VND</h3>
<% } %>

<div class="subscription-plans">
  <h2>Danh s√°ch g√≥i d·ªãch v·ª•</h2>
  <table class="plans-table">
    <thead>
      <tr>
        <th>T√™n g√≥i</th>
        <th>Gi√°</th>
        <th>S·ªë l∆∞·ª£ng truy·ªán t·ªëi ƒëa</th>
        <th>H√†nh ƒë·ªông</th>
      </tr>
    </thead>
    <tbody>
      <% availablePlans.forEach(plan => { %>
        <tr>
          <td><%= plan.PlanName %></td>
          <td><%= plan.Price.toLocaleString('vi-VN') %> VND</td>
          <td><%= plan.MaxNovels %></td>
          <td>
            <button class="btn-purchase" onclick="showPurchaseOptions(<%= plan.PlanID %>, '<%= plan.PlanName %>', <%= plan.Price %>)">Mua g√≥i</button>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>
</div>

<!-- Modal ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n -->
<div id="payment-modal" class="modal">
  <div class="modal-content">
    <span class="close-modal">&times;</span>
    <h3>Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</h3>
    <form id="payment-form" enctype="multipart/form-data">
      <input type="hidden" id="selected-plan-id" name="planId" value="">
      
      <div class="form-group">
        <label for="paymentMethod">Ph∆∞∆°ng th·ª©c thanh to√°n:</label>
        <select id="paymentMethod" name="paymentMethod" onchange="togglePaymentInfo()">
          <option value="momo">Momo</option>
          <option value="bank">Chuy·ªÉn kho·∫£n ng√¢n h√†ng</option>
        </select>
      </div>
      
      <div class="payment-details">
        <div id="payment-info-text">
          <p class="plan-name">G√≥i: <span id="plan-name-display"></span></p>
          <p class="plan-price">Gi√°: <span id="plan-price-display"></span> VND</p>
        </div>
      </div>
      
      <div class="form-buttons">
        <button type="button" onclick="confirmPaymentMethod()">X√°c nh·∫≠n</button>
        <button type="button" class="btn-cancel" onclick="closePaymentModal()">H·ªßy</button>
      </div>
    </form>
  </div>
</div>

<!-- Modal hi·ªÉn th·ªã QR code -->
<div id="qr-modal" class="modal">
  <div class="modal-content">
    <span class="close-qr">&times;</span>
    <div class="qr-header">
      <img src="/public/images/momo-logo.png" alt="Momo" class="payment-logo" id="payment-logo">
      <h3 id="qr-title">Qu√©t m√£ QR ƒë·ªÉ thanh to√°n</h3>
    </div>
    
    <div class="qr-container">
      <img id="qr-image" src="" alt="QR Code">
      <div class="qr-info">
        <p id="plan-info"></p>
        <p id="qr-transaction-id"></p>
        <p id="qr-instruction">Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng ƒë·ªÉ ho√†n t·∫•t thanh to√°n</p>
      </div>
    </div>
    
    <div class="qr-actions">
      <button onclick="showUploadForm()" class="btn-confirm">ƒê√£ thanh to√°n</button>
      <button onclick="closeQRModal()" class="btn-cancel">H·ªßy b·ªè</button>
    </div>
  </div>
</div>

<!-- Modal t·∫£i l√™n ·∫£nh ch·ª©ng minh thanh to√°n -->
<div id="upload-modal" class="modal">
  <div class="modal-content">
    <span class="close-upload">&times;</span>
    <h3>T·∫£i l√™n ·∫£nh ch·ª©ng minh thanh to√°n</h3>
    
    <form id="upload-form" enctype="multipart/form-data">
      <input type="hidden" id="upload-plan-id" name="planId" value="">
      <input type="hidden" id="upload-payment-method" name="paymentMethod" value="">
      <input type="hidden" id="upload-transaction-id" name="transactionId" value="">
      
      <div class="form-group">
        <label for="proofImage">·∫¢nh ch·ª©ng minh thanh to√°n:</label>
        <div class="file-upload-container">
          <input type="file" id="proofImage" name="proofImage" accept="image/*" required onchange="previewImage(this)">
          <label for="proofImage" class="file-upload-label">
            <i class="fas fa-cloud-upload-alt"></i> Ch·ªçn ·∫£nh
          </label>
        </div>
        <div id="image-preview" class="image-preview"></div>
      </div>
      
      <div class="form-buttons">
        <button type="button" onclick="submitProofImage()">X√°c nh·∫≠n</button>
        <button type="button" class="btn-cancel" onclick="closeUploadModal()">H·ªßy</button>
      </div>
    </form>
  </div>
</div>

<!-- Th√¥ng b√°o -->
<div id="alert-container"></div>
</main>


<script>
    // === JAVASCRIPT CHO TRANG H·ªí S∆† NG∆Ø·ªúI D√ôNG ===

document.addEventListener('DOMContentLoaded', function() {
  // X·ª≠ l√Ω form ƒë·ªïi m·∫≠t kh·∫©u
  const changePasswordForm = document.getElementById('changePasswordForm');
  if (changePasswordForm) {
    changePasswordForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const userID = document.getElementById('userID').value;
      const currentPassword = document.getElementById('currentPassword').value;
      const newPassword = document.getElementById('newPassword').value;
      
      // Validation
      if (!currentPassword || !newPassword) {
        showAlert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin', 'error');
        return;
      }
      
      if (newPassword.length < 6) {
        showAlert('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±', 'error');
        return;
      }
      
      try {
        const response = await fetch('/api/user/change-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            userID,
            currentPassword,
            newPassword
          })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          showAlert('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng', 'success');
          changePasswordForm.reset();
        } else {
          showAlert(data.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i', 'error');
        }
      } catch (error) {
        showAlert('ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i', 'error');
        console.error('Error:', error);
      }
    });
  }
  
  // X·ª≠ l√Ω n√∫t th√™m ti·ªÉu thuy·∫øt
  const addNovelBtn = document.getElementById('add-novel-btn');

if (addNovelBtn) {
  addNovelBtn.addEventListener('click', async function () {
    try {
      const response = await fetch('/user/check-novel-limit');  // ho·∫∑c /user/purchase-novels n·∫øu b·∫°n d√πng t√™n n√†y
      const data = await response.json();

      if (data.success) {
        if (data.remainingNovels > 0) {
          const confirmAdd = confirm(`B·∫°n c√≤n ${data.remainingNovels} l∆∞·ª£t th√™m ti·ªÉu thuy·∫øt. Ti·∫øp t·ª•c?`);
          if (confirmAdd) {
            window.location.href = '/novels';
          }
        } else {
          alert("B·∫°n ƒë√£ h·∫øt l∆∞·ª£t s·ªü h·ªØu ti·ªÉu thuy·∫øt. Vui l√≤ng n√¢ng c·∫•p g√≥i ƒë·ªçc!");
        }
      } else {
        alert(data.message || "Kh√¥ng th·ªÉ ki·ªÉm tra gi·ªõi h·∫°n!");
      }
    } catch (err) {
      console.error("L·ªói khi ki·ªÉm tra gi·ªõi h·∫°n:", err);
      alert("L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  });
}
  
  // X·ª≠ l√Ω n√∫t ƒëƒÉng t·∫£i ti·ªÉu thuy·∫øt
  const uploadNovelBtn = document.getElementById('upload-novel-btn');
  if (uploadNovelBtn) {
    uploadNovelBtn.addEventListener('click', function() {
      window.location.href = '/user/upload';
    });
  }
  
  // Bi·∫øn l∆∞u tr·ªØ th√¥ng tin g√≥i hi·ªán t·∫°i
let currentPlan = {
  id: null,
  name: '',
  price: 0
};

// Bi·∫øn l∆∞u tr·ªØ th√¥ng tin giao d·ªãch
let transactionInfo = {
  id: '',
  paymentMethod: '',
  planId: null
};

// H√†m hi·ªÉn th·ªã modal l·ª±a ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
function showPurchaseOptions(planId, planName, planPrice) {
  console.log("Opening modal for plan:", planId, planName, planPrice);
  
  // C·∫≠p nh·∫≠t th√¥ng tin g√≥i hi·ªán t·∫°i
  currentPlan.id = planId;
  currentPlan.name = planName;
  currentPlan.price = planPrice;
  
  // C·∫≠p nh·∫≠t th√¥ng tin hi·ªÉn th·ªã trong modal
  document.getElementById('selected-plan-id').value = planId;
  document.getElementById('plan-name-display').textContent = planName;
  document.getElementById('plan-price-display').textContent = planPrice.toLocaleString('vi-VN');
  
  // Hi·ªÉn th·ªã modal
  const modal = document.getElementById('payment-modal');
  modal.style.display = 'flex';
}

// X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n
function togglePaymentInfo() {
  const paymentMethod = document.getElementById('paymentMethod').value;
  console.log("Selected payment method:", paymentMethod);
  
  // C√≥ th·ªÉ th√™m logic ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin ri√™ng theo t·ª´ng ph∆∞∆°ng th·ª©c thanh to√°n
}

// X√°c nh·∫≠n ph∆∞∆°ng th·ª©c thanh to√°n v√† chuy·ªÉn sang b∆∞·ªõc ti·∫øp theo
function confirmPaymentMethod() {
  const planId = document.getElementById('selected-plan-id').value;
  const paymentMethod = document.getElementById('paymentMethod').value;
  
  // T·∫°o ID giao d·ªãch ng·∫´u nhi√™n
  const transactionId = generateTransactionId();
  
  // L∆∞u th√¥ng tin giao d·ªãch
  transactionInfo = {
    id: transactionId,
    paymentMethod: paymentMethod,
    planId: planId
  };
  
  // ƒê√≥ng modal ch·ªçn ph∆∞∆°ng th·ª©c
  closePaymentModal();
  
  // Hi·ªÉn th·ªã modal QR t∆∞∆°ng ·ª©ng
  showQRCode(paymentMethod);
}

// T·∫°o ID giao d·ªãch ng·∫´u nhi√™n
function generateTransactionId() {
  return 'TXN' + Date.now() + Math.floor(Math.random() * 1000);
}

// Hi·ªÉn th·ªã m√£ QR thanh to√°n
function showQRCode(paymentMethod) {
  // C·∫≠p nh·∫≠t th√¥ng tin hi·ªÉn th·ªã
  document.getElementById('plan-info').textContent = `G√≥i ${currentPlan.name} - ${currentPlan.price.toLocaleString('vi-VN')} VND`;
  document.getElementById('qr-transaction-id').textContent = `M√£ giao d·ªãch: ${transactionInfo.id}`;
  
  // C·∫≠p nh·∫≠t logo v√† ti√™u ƒë·ªÅ theo ph∆∞∆°ng th·ª©c thanh to√°n
  if (paymentMethod === 'momo') {
    document.getElementById('payment-logo').src = '/public/images/momo-logo.png';
    document.getElementById('payment-logo').alt = 'Momo';
    document.getElementById('qr-title').textContent = 'Qu√©t m√£ QR ƒë·ªÉ thanh to√°n qua Momo';
    // Gi·∫£ l·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn m√£ QR c·ªßa MoMo
    document.getElementById('qr-image').src = `/payment/qr/momo?amount=${currentPlan.price}&transactionId=${transactionInfo.id}`;
  } else {
    document.getElementById('payment-logo').src = '/public/images/bank-logo.png';
    document.getElementById('payment-logo').alt = 'Bank Transfer';
    document.getElementById('qr-title').textContent = 'Qu√©t m√£ QR ƒë·ªÉ chuy·ªÉn kho·∫£n ng√¢n h√†ng';
    // Gi·∫£ l·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn m√£ QR chuy·ªÉn kho·∫£n ng√¢n h√†ng
    document.getElementById('qr-image').src = `/payment/qr/bank?amount=${currentPlan.price}&transactionId=${transactionInfo.id}`;
  }
  
  // Hi·ªÉn th·ªã modal QR
  document.getElementById('qr-modal').style.display = 'flex';
}

// Hi·ªÉn th·ªã form t·∫£i l√™n ·∫£nh ch·ª©ng minh thanh to√°n
function showUploadForm() {
  // ƒê√≥ng modal QR
  closeQRModal();
  
  // C·∫≠p nh·∫≠t th√¥ng tin cho form t·∫£i l√™n
  document.getElementById('upload-plan-id').value = currentPlan.id;
  document.getElementById('upload-payment-method').value = transactionInfo.paymentMethod;
  document.getElementById('upload-transaction-id').value = transactionInfo.id;
  
  // X√≥a b·∫•t k·ª≥ xem tr∆∞·ªõc ·∫£nh n√†o
  document.getElementById('image-preview').innerHTML = '';
  
  // Hi·ªÉn th·ªã modal t·∫£i l√™n
  document.getElementById('upload-modal').style.display = 'flex';
}

// X·ª≠ l√Ω xem tr∆∞·ªõc ·∫£nh
function previewImage(input) {
  const preview = document.getElementById('image-preview');
  preview.innerHTML = '';
  
  if (input.files && input.files[0]) {
    const reader = new FileReader();
    
    reader.onload = function(e) {
      const img = document.createElement('img');
      img.src = e.target.result;
      preview.appendChild(img);
    }
    
    reader.readAsDataURL(input.files[0]);
  }
}

// G·ª≠i ·∫£nh ch·ª©ng minh thanh to√°n l√™n server
function submitProofImage() {
  const form = document.getElementById('upload-form');
  const formData = new FormData(form);
  
  // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
  showAlert('ƒêang g·ª≠i th√¥ng tin thanh to√°n...', 'info');
  
  // G·ª≠i request ƒë·∫øn server
  fetch('/user/buyplan', {
    method: 'POST',
    body: formData
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('L·ªói khi g·ª≠i th√¥ng tin thanh to√°n');
    }
    return response.json();
  })
  .then(data => {
    console.log('Payment submitted successfully:', data);
    
    // ƒê√≥ng modal t·∫£i l√™n
    closeUploadModal();
    
    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    showAlert('ƒê√£ g·ª≠i th√¥ng tin thanh to√°n th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω x√°c nh·∫≠n sau.', 'success');
    
    // C√≥ th·ªÉ l√†m m·ªõi trang sau 2 gi√¢y
    setTimeout(() => {
      window.location.reload();
    }, 2000);
  })
  .catch(error => {
    console.error('Error submitting payment:', error);
    showAlert('C√≥ l·ªói x·∫£y ra: ' + error.message, 'error');
  });
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showAlert(message, type) {
  const alertContainer = document.getElementById('alert-container');
  const alertDiv = document.createElement('div');
  
  alertDiv.className = 'alert alert-' + type;
  alertDiv.innerHTML = `
    ${message}
    <span class="alert-close" onclick="closeAlert(this)">&times;</span>
  `;
  
  alertContainer.appendChild(alertDiv);
  
  // T·ª± ƒë·ªông ƒë√≥ng th√¥ng b√°o sau 5 gi√¢y
  setTimeout(() => {
    if (alertDiv.parentNode === alertContainer) {
      alertContainer.removeChild(alertDiv);
    }
  }, 5000);
}

// ƒê√≥ng th√¥ng b√°o
function closeAlert(element) {
  const alertDiv = element.parentNode;
  alertDiv.parentNode.removeChild(alertDiv);
}

// ƒê√≥ng c√°c modal
function closePaymentModal() {
  document.getElementById('payment-modal').style.display = 'none';
}

function closeQRModal() {
  document.getElementById('qr-modal').style.display = 'none';
}

function closeUploadModal() {
  document.getElementById('upload-modal').style.display = 'none';
}

// Th√™m event listener cho c√°c n√∫t ƒë√≥ng modal
document.addEventListener('DOMContentLoaded', function() {
  // N√∫t ƒë√≥ng modal thanh to√°n
  const closeModalBtn = document.querySelector('.close-modal');
  if (closeModalBtn) {
    closeModalBtn.addEventListener('click', closePaymentModal);
  }
  
  // N√∫t ƒë√≥ng modal QR
  const closeQRBtn = document.querySelector('.close-qr');
  if (closeQRBtn) {
    closeQRBtn.addEventListener('click', closeQRModal);
  }
  
  // N√∫t ƒë√≥ng modal t·∫£i l√™n
  const closeUploadBtn = document.querySelector('.close-upload');
  if (closeUploadBtn) {
    closeUploadBtn.addEventListener('click', closeUploadModal);
  }
  
  // ƒê√≥ng modal khi click b√™n ngo√†i
  window.addEventListener('click', function(event) {
    const paymentModal = document.getElementById('payment-modal');
    const qrModal = document.getElementById('qr-modal');
    const uploadModal = document.getElementById('upload-modal');
    
    if (event.target === paymentModal) {
      closePaymentModal();
    } else if (event.target === qrModal) {
      closeQRModal();
    } else if (event.target === uploadModal) {
      closeUploadModal();
    }
  });
});

// Hi·ªÉn th·ªã th√¥ng b√°o
function showAlert(message, type) {
  const alertContainer = document.getElementById('alert-container');
  
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert alert-${type}`;
  alertDiv.textContent = message;
  
  alertContainer.appendChild(alertDiv);
  
  // T·ª± ƒë·ªông x√≥a th√¥ng b√°o sau 3 gi√¢y
  setTimeout(() => {
    alertDiv.remove();
  }, 3000);
}

// S·ª± ki·ªán ƒë√≥ng modal khi click v√†o n√∫t X
document.querySelectorAll('.close-modal, .close-qr, .close-upload').forEach(button => {
  button.addEventListener('click', function() {
    this.closest('.modal').style.display = 'none';
    
    // D·ª´ng ki·ªÉm tra tr·∫°ng th√°i thanh to√°n n·∫øu ƒëang ƒë√≥ng modal QR
    if (this.classList.contains('close-qr') && window.paymentCheckInterval) {
      clearInterval(window.paymentCheckInterval);
    }
  });
});

// S·ª± ki·ªán ƒë√≥ng modal khi click ra ngo√†i
window.addEventListener('click', function(event) {
  document.querySelectorAll('.modal').forEach(modal => {
    if (event.target === modal) {
      modal.style.display = 'none';
      
      // D·ª´ng ki·ªÉm tra tr·∫°ng th√°i thanh to√°n n·∫øu ƒëang ƒë√≥ng modal QR
      if (modal.id === 'qr-modal' && window.paymentCheckInterval) {
        clearInterval(window.paymentCheckInterval);
      }
    }
  });
});
  
  // Th√™m c√°c class dynamic cho elements
  function addDynamicClasses() {
    // Status tags
    const statusElements = document.querySelectorAll('p:contains("Tr·∫°ng th√°i:")');
    statusElements.forEach(el => {
      const text = el.textContent;
      if (text.includes("Ho·∫°t ƒë·ªông")) {
        el.innerHTML = el.innerHTML.replace("Ho·∫°t ƒë·ªông", '<span class="user-status status-active">Ho·∫°t ƒë·ªông</span>');
      } else if (text.includes("B·ªã c·∫•m")) {
        el.innerHTML = el.innerHTML.replace("B·ªã c·∫•m", '<span class="user-status status-banned">B·ªã c·∫•m</span>');
      }
    });
    
    // Role tags
    const roleElements = document.querySelectorAll('p:contains("Vai tr√≤:")');
    roleElements.forEach(el => {
      const text = el.textContent;
      if (text.includes("Qu·∫£n tr·ªã vi√™n")) {
        el.innerHTML = el.innerHTML.replace("Qu·∫£n tr·ªã vi√™n", '<span class="role-tag role-admin">Qu·∫£n tr·ªã vi√™n</span>');
      } else if (text.includes("Ng∆∞·ªùi d√πng")) {
        el.innerHTML = el.innerHTML.replace("Ng∆∞·ªùi d√πng", '<span class="role-tag role-user">Ng∆∞·ªùi d√πng</span>');
      }
    });
    
    // Wrap user info
    const userInfoHeading = document.querySelector('h2:contains("H·ªì s∆° c·ªßa")');
    if (userInfoHeading) {
      const userInfoDiv = document.createElement('div');
      userInfoDiv.className = 'user-info';
      
      let nextEl = userInfoHeading.nextElementSibling;
      const elementsToWrap = [userInfoHeading];
      
      while (nextEl && nextEl.tagName === 'P') {
        elementsToWrap.push(nextEl);
        nextEl = nextEl.nextElementSibling;
      }
      
      elementsToWrap.forEach(el => {
        userInfoDiv.appendChild(el.cloneNode(true));
      });
      
      elementsToWrap[0].parentNode.insertBefore(userInfoDiv, elementsToWrap[0]);
      
      elementsToWrap.forEach(el => {
        el.parentNode.removeChild(el);
      });
    }
    
    // Income section
    const incomeHeading = document.querySelector('h1:contains("Thu nh·∫≠p")');
    if (incomeHeading) {
      const incomeSection = document.createElement('div');
      incomeSection.className = 'income-section';
      
      let nextEl = incomeHeading.nextElementSibling;
      const elementsToWrap = [incomeHeading];
      
      while (nextEl && (nextEl.tagName === 'H3' || nextEl.tagName === 'P')) {
        elementsToWrap.push(nextEl);
        nextEl = nextEl.nextElementSibling;
      }
      
      elementsToWrap.forEach(el => {
        incomeSection.appendChild(el.cloneNode(true));
      });
      
      elementsToWrap[0].parentNode.insertBefore(incomeSection, elementsToWrap[0]);
      
      elementsToWrap.forEach(el => {
        el.parentNode.removeChild(el);
      });
    }
  
  // Th·ª±c hi·ªán th√™m class sau khi trang ƒë√£ load
  setTimeout(addDynamicClasses, 100);
  
  // Utility function to show alerts
  function showAlert(message, type = 'info') {
    // Create alert div if it doesn't exist
    let alertDiv = document.getElementById('alert-notification');
    if (!alertDiv) {
      alertDiv = document.createElement('div');
      alertDiv.id = 'alert-notification';
      alertDiv.style.position = 'fixed';
      alertDiv.style.top = '20px';
      alertDiv.style.right = '20px';
      alertDiv.style.padding = '15px 20px';
      alertDiv.style.borderRadius = '5px';
      alertDiv.style.color = 'white';
      alertDiv.style.fontWeight = '500';
      alertDiv.style.zIndex = '9999';
      alertDiv.style.boxShadow = '0 3px 10px rgba(0,0,0,0.2)';
      alertDiv.style.transition = 'opacity 0.3s ease';
      document.body.appendChild(alertDiv);
    }
    
    // Set style based on alert type
    switch(type) {
      case 'success':
        alertDiv.style.backgroundColor = '#4caf50';
        break;
      case 'error':
        alertDiv.style.backgroundColor = '#f44336';
        break;
      case 'warning':
        alertDiv.style.backgroundColor = '#ff9800';
        break;
      default:
        alertDiv.style.backgroundColor = '#2196f3';
    }
    
    // Set message and show alert
    alertDiv.textContent = message;
    alertDiv.style.opacity = '1';
    
    // Hide after 3 seconds
    setTimeout(() => {
      alertDiv.style.opacity = '0';
    }, 3000);
  }
  
  // jQuery-like selector for text content
  Document.prototype.querySelectorAll = (function(orig) {
    return function(selector) {
      if (selector.includes(':contains(')) {
        const matches = selector.match(/:contains\((.*?)\)/);
        if (matches) {
          const textToFind = matches[1].replace(/["']/g, '');
          const baseSelector = selector.replace(/:contains\(.*?\)/, '');
          const elements = [...orig.call(this, baseSelector)];
          return elements.filter(el => el.textContent.includes(textToFind));
        }
      }
      return orig.call(this, selector);
    };
  })(Document.prototype.querySelectorAll);
}); 
</script>